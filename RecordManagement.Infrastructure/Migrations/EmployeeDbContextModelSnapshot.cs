// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecordManagement.Infrastructure.Common.Persistence;

#nullable disable

namespace RecordManagement.Infrastructure.Migrations
{
    [DbContext(typeof(EmployeeDbContext))]
    partial class EmployeeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("RecordManagement.Domain.Educationalbackgrounds.EducationalBackground", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("YearGraduated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EducationalBackgrounds");
                });

            modelBuilder.Entity("RecordManagement.Domain.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RecordManagement.Domain.EmploymentHistories.EmploymentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmploymentHistories");
                });

            modelBuilder.Entity("RecordManagement.Domain.References.Reference", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("References");
                });

            modelBuilder.Entity("RecordManagement.Domain.SkillsAndQualifications.SkillsAndQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("RecordManagement.Domain.Educationalbackgrounds.EducationalBackground", b =>
                {
                    b.HasOne("RecordManagement.Domain.Employees.Employee", null)
                        .WithMany("EducationalBackgrounds")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecordManagement.Domain.Employees.Employee", b =>
                {
                    b.OwnsOne("RecordManagement.Domain.PersonalInformations.PersonalInformation", "PersonalInfo", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BloodType")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("BloodType");

                            b1.Property<string>("Citizenship")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Citizenship");

                            b1.Property<string>("CivilStatus")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("CivilStatus");

                            b1.Property<DateTime>("DateOfBirth")
                                .HasColumnType("TEXT")
                                .HasColumnName("DateOfBirth");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("FullName");

                            b1.Property<string>("Gender")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Gender");

                            b1.Property<int>("Height")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Height");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PlaceOfBirth")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("PlaceOfBirth");

                            b1.Property<int>("Weight")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Weight");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("RecordManagement.Domain.ContactInformations.ContactInformation", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("EmailAddress");

                            b1.Property<string>("MobileNumber")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("MobileNumber");

                            b1.Property<string>("PermanentAddress")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("PermanentAddress");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("PhoneNumber");

                            b1.Property<string>("PresentAddress")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("PresentAddress");

                            b1.HasKey("Id");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("Id");
                        });

                    b.Navigation("ContactInfo")
                        .IsRequired();

                    b.Navigation("PersonalInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("RecordManagement.Domain.EmploymentHistories.EmploymentHistory", b =>
                {
                    b.HasOne("RecordManagement.Domain.Employees.Employee", null)
                        .WithMany("EmploymentHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecordManagement.Domain.References.Reference", b =>
                {
                    b.HasOne("RecordManagement.Domain.Employees.Employee", null)
                        .WithMany("References")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecordManagement.Domain.SkillsAndQualifications.SkillsAndQualification", b =>
                {
                    b.HasOne("RecordManagement.Domain.Employees.Employee", null)
                        .WithMany("Skills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecordManagement.Domain.Employees.Employee", b =>
                {
                    b.Navigation("EducationalBackgrounds");

                    b.Navigation("EmploymentHistories");

                    b.Navigation("References");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
